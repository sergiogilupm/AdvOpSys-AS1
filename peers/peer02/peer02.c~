#include<stdio.h>
#include<string.h>    //strlen
#include<sys/socket.h>
#include<arpa/inet.h> //inet_addr

#define PORT 5001
#define SERVER_PORT 5000


char *peerID; //_ = "peer01";

int peerPort = 0;
int globalOpt = 1;


/*
 * This function will handle connection for each request
 */

void *connection_handler(void *socket_desc)
{
	//Get the socket descriptor
	char request_received[2000];
	int sock = *(int*)socket_desc;
	char *message;
	char *serverReply;
	     
	read (sock , request_received , 255);
	printf ("A request has been received: %s\n", request_received);

	/*PROMPT GOES HERE*/

	message = strtok(request_received ," ");

	//The only call that the peer can recieve is an obtain() call. Otherwise error

	if (strcmp(message,"OBTAIN")==0) /* Check for errors and exceptions */
	{	
		printf("Obtain file request\n");
		char *fileName = strtok(NULL, " ");

    		if (sendFile(sock, fileName) < 0)
		{
			printf("File %s could not be obtained\n", fileName);
		}
		else
		{
			printf("File %s obtained successfully\n", fileName);
		}
	}

	else
	{
		printf ("ERROR\n");
		serverReply = "ERROR BAD_REQUEST";
		write(sock, serverReply, sizeof(serverReply));
	}

    //Free the socket pointer
    free(socket_desc);
     
    return (void *) 0;
}


void *incoming_connections_handler (void)
{
    printf ("This is the incoming connection handler!");
     
    int IN_socket_desc , IN_new_socket , c , *IN_new_sock;
    struct sockaddr_in IN_server , client;
    char *message;
     
    //Create socket
    IN_socket_desc = socket(AF_INET , SOCK_STREAM , 0);

    if (IN_socket_desc == -1)
    {
        perror("Could not create socket");
    }
     
    //Prepare the sockaddr_in structure
    IN_server.sin_family = AF_INET;
    IN_server.sin_addr.s_addr = INADDR_ANY;
    IN_server.sin_port = htons( PORT );
     
    //Bind
    if( bind(IN_socket_desc,(struct sockaddr *) &IN_server , sizeof(IN_server)) < 0)
    {
        perror("bind failed");
        return (void *) 1;
    }

    puts("bind done");
     
    //Listen
    listen(IN_socket_desc , 3);
     
    //Accept and incoming connection
    printf("Waiting for incoming connections in port %i...\n", PORT);
    c = sizeof(struct sockaddr_in);

    while( (IN_new_socket = accept(IN_socket_desc, (struct sockaddr *)&client, (socklen_t*)&c)) )
    {
        puts("Connection accepted");
         
        pthread_t sniffer_thread;
        IN_new_sock = malloc(1);
        *IN_new_sock = IN_new_socket;
         
        if( pthread_create( &sniffer_thread , NULL ,  connection_handler , (void*) IN_new_sock) < 0)
        {
            perror("could not create thread");
            return (void *) 1;
        }
         
        //Now join the thread , so that we dont terminate before the thread
        pthread_join( sniffer_thread , NULL);
        puts("Handler assigned");
    }
     
    if (IN_new_socket<0)
    {
        perror("accept failed");
        return (void *) 1;
    }
     
    return (void *) 0;
}


/*char *getPortFromTuple(char *tuple)
{
	char* peerID;

	peerID = strtok(tuple, ":");
	return peerID;
}*/

int searchFile (char* fileName)
{
    int sock;
    struct sockaddr_in server;
    char serverReply[2000];
    char *serverCode;
    //char *peerID;
    char *fixedPeerID;
    char request[80];
    char peerList[2000];
    char option[10];
    int fixedOption;
    int i;


    //Create socket
    sock = socket(AF_INET , SOCK_STREAM , 0);
    if (sock == -1)
    {
        printf("Could not create socket");
    }
    puts("Socket created");
     
    server.sin_addr.s_addr = inet_addr("127.0.0.1");
    server.sin_family = AF_INET;
    server.sin_port = htons( SERVER_PORT );
 
    //Connect to server
    if (connect(sock , (struct sockaddr *)&server , sizeof(server)) < 0)
    {
        perror("Connection to server failed");
        return 1;
    }
     
    printf("Connected to server\n");

    //char *request = "SEARCH testFile.txt";


	strcpy(request, "SEARCH");
	strcat(request, " ");
	strcat(request, fileName);

    	printf("\nThe request that is going to be sent is %s\n", request);
    	write(sock, request, strlen(request));
	read (sock , serverReply , sizeof(serverReply));

	strncpy(peerList, serverReply, sizeof(serverReply));

	serverCode = strtok(serverReply," ");
	printf ("Server reply is: %s\n", serverCode);

	if (strcmp(serverCode, "OK") == 0)
	{
		char *aux = strtok(NULL, " ");
		
		printf("File found in the following peers: \n");
		char* token;
		int count = 1;
		while (aux != NULL && strlen(aux)>1)
		//while ((token = strtok(serverReply, " ")) != NULL);
		{
			//char *auxPeerID = getPortFromTuple(aux);
			printf("\t[%i] - %s\n", count, aux);
			aux = strtok(NULL, " ");
			count++;
		}
		//printf("\t[%i] - %s\n", count, aux); //Last token

		printf("Select the peer to download the file [1 - %i]: ", count - 1);


		if(fgets (option, 10, stdin) == NULL ) 
   		{
			printf("ERROR: WRONG PEER ID");	
			return -1;
		}

		fixedOption = atoi(option);

		char *peerTuple;

		strtok(peerList, " "); // Getting rid of the "OK" response

		for (i = 1; i < fixedOption; i++)
		{
			strtok(NULL, " ");
		}		
		
		
		/*if (i == fixedOption)
		{
			peerTuple = peerList;
		}
		else
		{*/
			peerTuple = strtok(NULL, " ");
			printf("You have selected option %i, which is peer %s\n", fixedOption, peerTuple);
		//}
		strtok(peerTuple,":");
		char* connectingPeer = strtok(NULL,":");
		
		printf ("Connecting to port %i, requesting file %s...\n",atoi(connectingPeer), fileName);
		if (obtainFile(atoi(connectingPeer), fileName) < 0)
		{
			printf("Error downloading file\n");
			return -1;
		}

		/*In order to get rid of that annoying '\n' escape char*/
		//fixedPeerID = strtok(peerID, "\n"); 

		// WHEN CHOSEN, CALL TO OBTAIN PEER FUNC
		/*int peerPort = getPort(peerID);
		obtain_file (peerPort, char* fileName);*/
	}

	else
	{
		printf("ERROR WHEN SEARCHING FOR FILE: %s\n", serverReply);
		return -1;
	}

	return 0;
}

/*int getPort(char* peerID)
{
    int sock;
    struct sockaddr_in server;
    char serverReply[2000];
    char *serverCode;
    char request[80];

    //Create socket
    sock = socket(AF_INET , SOCK_STREAM , 0);
    if (sock == -1)
    {
        printf("Could not create socket for retrieving port");
    }
    puts("Socket created");
     
    server.sin_addr.s_addr = inet_addr("127.0.0.1");
    server.sin_family = AF_INET;
    server.sin_port = htons( SERVER_PORT );
 
    //Connect to server
    if (connect(sock , (struct sockaddr *)&server , sizeof(server)) < 0)
    {
        perror("Connection to server failed");
        return 1;
    }
     
    printf("Connected to server\n");

    //char *request = "SEARCH testFile.txt";


	strcpy(request, "GET_PORT");
	strcat(request, " ");
	strcat(request, peerID);

    	printf("\nThe request that is going to be sent is %s\n", request);
    	write(sock, request, strlen(request));
	read (sock , serverReply , sizeof(serverReply));

	serverCode = strtok(serverReply," ");
	printf ("Server reply is: %s\n", serverCode);

	if (strcmp(serverCode, "OK") == 0)
	{
		printf("Peer found with port %s\n", serverReply);
		return atoi(serverReply);
	}
	else
	{
		printf("ERROR WHEN RETRIEVING THE PORT: %s\n", serverReply);
		return -1;
	}
}*/



int registerFile (char* fileName)
{
    int sock;
    struct sockaddr_in server;
    char serverReply[2000];
    char request[80];

    char port[10];
    //char peerID[30];


    //peerID = peerID_;
    //strcpy(peerID, peerID_);

    snprintf(port, sizeof( PORT ) + 1, "%i", PORT);

//snprintf(valStr, sizeof(i->val), "%i", i->val);

    //Create socket
    sock = socket(AF_INET , SOCK_STREAM , 0);
    if (sock == -1)
    {
        printf("Could not create socket");
    }
    puts("Socket created");
     
    server.sin_addr.s_addr = inet_addr("127.0.0.1");
    server.sin_family = AF_INET;
    server.sin_port = htons( SERVER_PORT );
 
    //Connect to server
    if (connect(sock , (struct sockaddr *)&server , sizeof(server)) < 0)
    {
        perror("Connection to server failed");
        return 1;
    }
     
    printf("Connected to server\n");
    
	strcpy(request, "REGISTRY");
	strcat(request, " ");
	strcat(request, fileName);
	strcat(request, " ");
	strcat(request, peerID);
	strcat(request, ":");
	strcat(request, port);

    //char *request = "REGISTRY testFile.txt peer01:5001";

	/*char str[80];
	strcpy(str, "these ");
	strcat(str, "strings ");
	strcat(str, "are ");
	strcat(str, "concatenated.");*/
 	//char src[50], dest[50];

	  // strcpy(request, "OBTAIN ");
	   /*strcpy(dest, "This is destination");

	   strncat(dest, src, 15);

	   printf("Final destination string : |%s|", dest);*/


	/*strncat(request, fileName, strlen(fileName) -1);
	printf ("Request is: %s\n", request);*/

    	printf("\nThe request that is going to be sent is %s\n", request);
    	write(sock, request, strlen(request));
	read (sock , serverReply , sizeof(serverReply));
	printf ("Server reply is: %s\n", serverReply);
	return 0;
}

int check_option (char* optionAux)
{
	int option = optionAux[0];
	char auxPort[6]; 
	char fileName[60];
	char* fixedFileName;
	int len = 0;

	/*if (strcmp(option,"1")==0) 
	{
		printf("Register a file\n" );
		printf("Type in the file you want to register: ");

		if( fgets (fileToRegister, 60, stdin) == NULL ) 
		{
			printf("ERROR WHEN READING OPTION");	
			return -1;
		}

		//read = getline(&fileToRegister, &len, stdin);
		// Ask the user for the file to register
		if (registerFile(fileToRegister) == 0)
		{
			printf ("File %s registered successfully\n", fileName);
		}
		else
		{
			printf("ERROR REGISTERING FILE\n");
		}
	}
	
	else if (strcmp(option,"2")==0) 
	{
		printf("Search for a file **NOT IMPLEMENTED YET**\n");
		//Ask the user for the file to search
		searchFile(fileName);
	}

	else if (strcmp(option,"3")==0) 
	{
			//printf("Obtain file from another peer. Type port of destination peer:");
			//fgets(auxPort, strlen(auxPort), stdin);
			//peerDestPort = atoi(auxPort);
			//scanf ("%i", &peerDestPort);

			//fgets(fileName, 50, stdin);
			//scanf ("%s", &fileName);
			printf ("File: %s\n", fileName);
			obtain_file(peerDestPort, fileName);
	}

	else
	{
		printf("Invalid option\n" );
	}*/

	   switch(option)
	   {
		   case '1' :
			printf("Register a file\n" );

			globalOpt = 2;
			printf("Type in the file you want to register: "); //*/ OPTION 2

			//Ask the user for the file to search
			if(fgets (fileName, 60, stdin) == NULL ) 
   			{
				printf("ERROR: WRONG FILE NAME");	
				return -1;
			}

			/*In order to get rid of that annoying '\n' escape char*/
			fixedFileName = strtok(fileName, "\n"); 
			
			if (registerFile(fixedFileName) == 0)
			{
				printf ("File %s registered successfully\n", fileName);
			}
			else
			{
				printf("ERROR REGISTERING FILE\n");
			}
		      	break;

		   case '2' :

			printf("Search for a file\n");
	
			globalOpt = 3;
			printf("Type in the file you want to search: "); //*/ OPTION 3
		
			//Ask the user for the file to search
			if(fgets (fileName, 60, stdin) == NULL ) 
			{
				printf("*Error: Wrong file name");	
				return -1;
			}

			/*Next line is to get rid of that annoying '\n' escape char*/
			fixedFileName = strtok(fileName, "\n"); 

			if (searchFile(fixedFileName) == 0)
			{
				printf("Sucess in search call\n");
			}
			else
			{
				printf("*Error when searching for the file\n");
			}

			break;

		   /*case '3' :

			printf ("File: %s\n", fileName);
			obtainFile(peerDestPort, fileName);
			break;*/

		   default :
		      printf("Invalid option\n" );
	   }
 
   return 0;
	
}

int sendFile (int sock, char* fileName)
{
    char origin[200];
    strcpy(origin, "./shared_folder/");
    strcat(origin, fileName);

    char buffer[256];
    char* message;
    FILE *fp;
    fp=fopen(origin, "r");
    int bytes_read = -1;
    if (fp != NULL)
    {
	printf ("File %s opened\n", fileName);
	//message = "OK";
	//write(sock, message, sizeof(message));
	while ( (bytes_read = fread (buffer, 1, sizeof (buffer), fp)) > 0)
	{
        	//printf ("What is written (with %i bytes ) is: %s\n", bytes_read, buffer);
		write(sock,buffer, bytes_read);
		//bytes_read = fread (buffer, 1, sizeof (buffer), fp);
	}
	fclose (fp);	
	close (sock);
	return 0;
    }
    else 
	{
		perror ("Error opening file");
		/*message = "ERROR FILE_NOT_FOUND";
		write(sock,buffer, bytes_read);*/
		close (sock);
		return -1;
	}
}


void showPromptMessage (int option)
{
	switch(option)
	{
		case '1' :
			printf ("\nPeer initialized. Available options:\n");
			printf("\t[1] - Register a file to the index server\n");
			printf("\t[2] - Obtain a file from another peer\n");
			printf ("\n**SELECT OPTION NUMBER:");
		break;

		case '2' :
			printf ("\nOption 2: Register a file.\n");
			printf ("Type in the file you want to register: ");
		break;

		case '3' :
			printf("\nOption 3: Search for a file\n");
			printf("Type in the file you want to search: "); 
		break;

		default :
			printf("\n*Error: Bad prompt code"); 
	}
}


int obtainFile (int port, char* fileName)
{
    int sock;
    struct sockaddr_in server;
    char server_reply[2000];
    char request[80];  
    char destination[200];
    strcpy(destination, "./shared_folder/");
    strcat(destination, fileName);


    //Create socket
    sock = socket(AF_INET , SOCK_STREAM , 0);
    if (sock == -1)
    {
        printf("Could not create socket");
	return -1;
    }
    puts("Socket created");
     
    server.sin_addr.s_addr = inet_addr("127.0.0.1");
    server.sin_family = AF_INET;
    server.sin_port = htons( port  );
 
    //Connect to remote server
    if (connect(sock , (struct sockaddr *)&server , sizeof(server)) < 0)
    {
        perror("connect failed. Error");
        return -1;
    }
     
    printf("Connected to port %i\n", port);

	strcpy(request, "OBTAIN");
	strcat(request, " ");
	strcat(request, fileName);
	strcat(request, " ");

    //request = "OBTAIN testFile01b.txt";
    printf("\n Requesting file %s to peer in port %i\n", fileName, port);
    write(sock, request, strlen(request));
    //read (sock, server_reply, sizeof(server_reply));
    //printf ("Server reply: %s\n", server_reply);


    	char buffer[256];
	int bytes_read = -1;
	bytes_read = read (sock , buffer , sizeof(buffer));
	if (bytes_read == 0)
	{
		printf("Error. The file coudln't be recieved\n");
		close(sock);
		return -1;
	}


    FILE *fp;
    fp=fopen(destination, "w");

    if (fp != NULL)
    {
	printf ("File %s opened\n", fileName);
	//bytes_read = fread (buffer, 1, sizeof (buffer), fp);
	
	while( (bytes_read) > 0 )
	{
        	//printf ("What is read from the socket (with %i bytes ) is: %s\n", bytes_read, buffer);
		
		//printf ("wrote %d\n", fwrite (buffer, 1, bytes_read, fp));
		//fwrite (buffer, 1, bytes_read, fp)

		if (( fwrite ( buffer, 1, bytes_read, fp)) != 1) 
		{
			perror ("fwrite failed");
			close(sock);
			return -1;
		}

		bytes_read = read (sock , buffer , sizeof(buffer));
	}	
	fclose (fp);
    }
    else 
	{
		perror ("Error opening file");
		close(sock);
		return -1;
	}
     
    	close(sock);
	return 0;
}



int main(int argc , char *argv[])
{

    	char option[10];
	globalOpt = 1;
	printf("argc: %i\n", argc);

    	//int port = 0;
    	/* INITIALIZATION */

	if (argc < 3 || argc > 4)
	{
		printf("Use: %s peer_ID port_number [-t]\n", argv[0]);
		return 0;
	}

	peerID = argv[1];
	peerPort = atoi(argv[2]);
    

	pthread_t incoming_connections_thread;
		 
	if( pthread_create( &incoming_connections_thread , NULL ,  incoming_connections_handler , NULL ) < 0)
	{
		perror("Could not create thread");
		return 1;
	}
         
	//Now join the thread, so that we dont terminate before the thread
	//pthread_join( incoming_connections_thread , NULL);
	puts("Handler assigned");
    

   	while(1)
    	{
		globalOpt = 1;
		//showPromptMessage(globalOpt);

		//option = '0';
		printf ("Peer initialized. Available options:\n");
		printf("\t[1] - Register a file to the index server\n");
		printf("\t[2] - Search for a file\n");
		//printf("\t[3] - Obtain a file from another peer\n");
	
		printf ("\n**SELECT OPTION NUMBER:");

		fgets(option, sizeof(option), stdin);
		//scanf(" %c", &option);
		//option = getchar();
	    	//fflush(stdin);
		//fflush(stdout);
		check_option(option);
	    	// validate input
	    	/*if (choice == 'y' || choice == 'n' || choice == 'm') {
			break;
	    	} else 
		{
	      		printf("Please enter only \'y\', \'n\' or \'m\'!\n");
	    	}

		if (fgets(option, sizeof(char), stdin) != NULL)
		{
			check_option(option);
		}*/
		//scanf("%i", &option);	
    	}   
    	return 0;
}
